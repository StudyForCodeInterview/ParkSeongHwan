#include <algorithm>
#include <iostream>
#include <queue>
#include <stack>
#include <vector>
#pragma warning(disable:4996)

using namespace std;

int arr[5'000'000];

int n;
int k;



int main()
{
	std::ios::sync_with_stdio(false);
	std::cin.tie(nullptr);
	std::cout.tie(nullptr);

	cin >> n >> k;

	for(int i = 0; i < n; i++)
	{
		cin >> arr[i];
	}

	nth_element(arr, arr + k - 1, arr + n);


	cout << arr[k - 1];
}


//틀린 코드
//해당 코드는 시간초과가 나는데, 피봇값을 중앙값으로 설정하려 했으나 해당 코드가 느려지게 하는 주범이 됨. 
//정답 코드에도 피봇을 findMid로 찾으면 시간초과
#include <algorithm>
#include <iostream>
#include <queue>
#include <stack>
#include <vector>
#pragma warning(disable:4996)

using namespace std;

int arr[5'000'000];

int n;
int k;

int findMid(int a, int b, int c) {
	if (arr[a] > arr[b])
		std::swap(a, b);
	if (arr[b] > arr[c])
		std::swap(b, c);
	if (arr[a] > arr[b])
		std::swap(a, b);
	return b;
}


void mySort(int begin, int end)
{
	if(begin >= end)
		return;

	//분할.
	int midIndex = findMid(begin, (begin + end) / 2, end);
	std::swap(arr[midIndex], arr[end]);

	int parBegin = begin;
	int parEnd = end - 1;

	while(parBegin <= parEnd)
	{
		while(parBegin <= parEnd && arr[parBegin] <= arr[end])
			parBegin++;
		while(parBegin <= parEnd && arr[parEnd] >= arr[end])
			parEnd--;

//그리고 여기서 begin, end를 ++,-- 해줘야 한다. 
//왜인지 생각해보기.
		if (parBegin < parEnd)
			std::swap(arr[parBegin], arr[parEnd]);
		else
			break;
	}
	std::swap(arr[parBegin], arr[end]);

	if (parBegin == k - 1)
		return;
	else if (parBegin > k - 1)
		mySort(begin, parBegin - 1);
	else
		mySort(parBegin + 1, end);
}


int main()
{
	std::ios::sync_with_stdio(false);
	std::cin.tie(nullptr);
	std::cout.tie(nullptr);

	cin >> n >> k;

	for(int i = 0; i < n; i++)
	{
		cin >> arr[i];
	}

	mySort(0, n-1);


	printf("%d", arr[k-1]);
}